package com.quipux.prueba_java.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.quipux.prueba_java.constant.Messages;
import com.quipux.prueba_java.constant.Values;
import io.jsonwebtoken.JwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.lang.NonNull;

import java.io.IOException;
import java.util.Collection;
import java.util.Map;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtService jwtService;

    private final UserDetailsServiceImpl userDetailsServiceImpl;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    @NonNull HttpServletResponse response,
                                    @NonNull FilterChain filterChain)
            throws ServletException, IOException {

        String jwtToken = request.getHeader(Messages.AUTHORIZATION_HEADER);

        if (jwtToken != null && jwtToken.startsWith(Messages.BEARER_PREFIX)) {
            jwtToken = jwtToken.substring(Values.TOKEN_PREFIX_LENGTH);

            try {

                if (jwtService.validateToken(jwtToken)) {

                    String username = jwtService.extractUsername(jwtToken);

                    String authoritiesList = jwtService.extractSpecificClaim(jwtToken, Messages.AUTHORITIES);

                    Collection<? extends GrantedAuthority> authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(authoritiesList);

                    SecurityContext securityContext = SecurityContextHolder.getContext();

//                    Authentication authentication = new UsernamePasswordAuthenticationToken(username, null, authorities);
//
//                    securityContext.setAuthentication(authentication);
//
//                    SecurityContextHolder.setContext(securityContext);
                    UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(username); // <-- CORRECTO

                    Authentication authentication = new UsernamePasswordAuthenticationToken(
                            userDetails, null, userDetails.getAuthorities());

                    SecurityContext context = SecurityContextHolder.getContext();
                    context.setAuthentication(authentication);
                }
            } catch (JwtException ex) {
                response.setContentType(MediaType.APPLICATION_JSON_VALUE);
                response.setStatus(HttpStatus.FORBIDDEN.value());
                new ObjectMapper().writeValue(response.getOutputStream(), Map.of(Messages.MESSAGE, ex.getMessage()));
            }
        }

        filterChain.doFilter(request, response);
    }
}
